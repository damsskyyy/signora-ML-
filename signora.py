# -*- coding: utf-8 -*-
"""Signora.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_ieijTkemo7ItnWfIUZbrdWkCJHKfP9u
"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.utils import to_categorical
import numpy as np
from PIL import Image
import pandas as pd
import os
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

pip install kaggle

# Set kaggle API credentials
os.makedirs(os.path.expanduser(r'C:\Users\damar\.kaggle'), exist_ok=True)
os.chmod(os.path.expanduser(r'C:\Users\damar\.kaggle'), 0o600)

# Download dataset using Kaggle API
!kaggle datasets download -d achmadnoer/alfabet-bisindo

# Unzip dataset
import zipfile

with zipfile.ZipFile('alfabet-bisindo.zip', 'r') as zip_ref:
    zip_ref.extractall('alfabet-bisindo')

#Load data
def load_data(data_dir):
    images = []
    labels = []
    citra_bisindo_dir = os.path.join(data_dir, 'Citra BISINDO')
    for label in os.listdir(citra_bisindo_dir):
        label_dir = os.path.join(citra_bisindo_dir, label)
        if os.path.isdir(label_dir):
            for image_file in os.listdir(label_dir):
                if image_file.endswith('.jpg') or image_file.endswith('.png'):
                    image_path = os.path.join(label_dir, image_file)
                    image = Image.open(image_path)
                    image = image.resize((64, 64))
                    image = np.array(image)
                    images.append(image)
                    labels.append(label)
    return np.array(images), np.array(labels)

data_dir = 'alfabet-bisindo'
images, labels = load_data(data_dir)

# Preprocess data
images = images / 255.0
from sklearn.preprocessing import LabelEncoder, OneHotEncoder

label_encoder = LabelEncoder()
integer_encoded = label_encoder.fit_transform(labels)
onehot_encoder = OneHotEncoder(sparse=False)
integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)
labels_onehot = onehot_encoder.fit_transform(integer_encoded)

# Split data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(images, labels_onehot, test_size=0.2, random_state=42)

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(256, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(512, activation='relu'),
    Dropout(0.5),
    Dense(len(label_encoder.classes_), activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Data augmentation
datagen = ImageDataGenerator(
    rotation_range=30,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

datagen.fit(X_train)

# Train model
history = model.fit(datagen.flow(X_train, y_train, batch_size=32),
                    validation_data=(X_test, y_test),
                    epochs=150)

# Evaluate model
loss, accuracy = model.evaluate(X_test, y_test)
print(f'Test accuracy: {accuracy:.2f}')

# Save model as .h5
model.save('model_signora.h5')

# Load model and convert to .tflite
model = tf.keras.models.load_model('model_signora.h5')

# Convert model to TensorFlow Lite format
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

# Save the model as .tflite
with open('model_signora.tflite', 'wb') as f:
    f.write(tflite_model)



# Plot accuracy
import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

# Plot loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()